!function(t,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.cyannotationCx2js=o():t.cyannotationCx2js=o()}(window,function(){return function(t){var o={};function e(a){if(o[a])return o[a].exports;var n=o[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,e),n.l=!0,n.exports}return e.m=t,e.c=o,e.d=function(t,o,a){e.o(t,o)||Object.defineProperty(t,o,{enumerable:!0,get:a})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,o){if(1&o&&(t=e(t)),8&o)return t;if(4&o&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&o&&"string"!=typeof t)for(var n in t)e.d(a,n,function(o){return t[o]}.bind(null,n));return a},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p="",e(e.s=0)}([function(t,o,e){"use strict";var a=e(1).CxToCyCanvas;t.exports={CxToCyCanvas:a}},function(t,o,e){"use strict";var a=function(){function t(t,o){for(var e=0;e<o.length;e++){var a=o[e];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(o,e,a){return e&&t(o.prototype,e),a&&t(o,a),o}}();var n=function(){function t(o){!function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t);var e=this;e.cx2js=o,this._findIntersection=function(t,o,e,a){var n=(a.y-e.y)*(o.x-t.x)-(a.x-e.x)*(o.y-t.y),r=((a.x-e.x)*(t.y-e.y)-(a.y-e.y)*(t.x-e.x))/n;return{x:this._epsilon(t.x+r*(o.x-t.x)),y:this._epsilon(t.y+r*(o.y-t.y))}},this._epsilon=function(t){return Math.abs(t)<1e-10?0:t},this._circleX=function(t,o,e){var a=o/t;return e&&t%2==0?(8==t&&(a+=.5/t),this._epsilon(Math.cos(2*a*Math.PI))):this._epsilon(Math.cos(2*a*Math.PI-Math.PI/2))},this._circleY=function(t,o,e){var a=o/t;return e&&t%2==0?(8==t&&(a+=.5/t),this._epsilon(Math.sin(2*a*Math.PI))):this._epsilon(Math.sin(2*a*Math.PI-Math.PI/2))},this._regularPolygonShapeFunction=function(t,o,a){a.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=[],c=0;c<o;c++){var f=this._circleX(o,c,!0)*n+i,u=this._circleY(o,c,!0)*r+l;s.push({x:f,y:u})}a.moveTo(s[0].x,s[0].y);for(var h=1;h<o;h++)a.lineTo(s[h].x,s[h].y);if(a.closePath(),t.fillColor){var p=e._colorFromInt(t.fillColor,t.fillOpacity);a.fillStyle=p,a.fill()}a.stroke()},this._starShapeFunction=function(t,o,a){a.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=2*o,c=[],f=0;f<s;f++)c.push({});for(var u=0;u<o;u++){var h=this._circleX(o,u,!1)*n+i,p=this._circleY(o,u,!1)*r+l,v=this._circleX(o,(u+2)%o,!1)*n+i,y=this._circleY(o,(u+2)%o,!1)*r+l;c[2*u]={x:h,y:p},c[(2*u+4)%s]={x:v,y:y}}for(var F=0;F<s;F+=2){var m=F,d=(F+4)%s,x=(F+2)%s,g=(x+s-4)%s;c[(F+1)%s]=this._findIntersection(c[m],c[d],c[x],c[g])}a.moveTo(c[0].x,c[0].y);for(var C=1;C<s;C++)a.lineTo(c[C].x,c[C].y);if(a.closePath(),t.fillColor){var _=e._colorFromInt(t.fillColor,t.fillOpacity);a.fillStyle=_,a.fill()}a.stroke()},this._scaleCustomPoint=function(t,o,e,a){return a*(o+t)/(e-o)},this._quadraticCurveBoundingBox=function(t,o,e,a,n,r){var i,l,s,c,f,u,h,p;h=t,p=o,((s=(l=e-t)/(i=n-t))<0||s>1)&&(h=l*l/(2*l-i)+t),((u=(f=a-o)/(c=r-o))<0||u>1)&&(p=f*f/(2*f-c)+o);var v={};return v.left=Math.min(t,n,h),v.top=Math.min(o,r,p),v.right=Math.max(t,n,h),v.bottom=Math.max(o,r,p),v.width=v.right-v.left,v.height=v.bottom-v.top,v},this._evalBez=function(t,o,e,a,n){return t*(1-n)*(1-n)*(1-n)+3*o*n*(1-n)*(1-n)+3*e*n*n*(1-n)+a*n*n*n},this._bezierCurveBoundingBox=function(t,o,a,n,r,i,l,s){var c=3*l-9*r+9*a-3*t,f=6*t-12*a+6*r,u=3*a-3*t,h=f*f-4*c*u,p=t,v=t;if(l<p&&(p=l),l>v&&(v=l),h>=0){var y=(-f+Math.sqrt(h))/(2*c);if(y>0&&y<1){var F=e._evalBez(t,a,r,l,y);F<p&&(p=F),F>v&&(v=F)}var m=(-f-Math.sqrt(h))/(2*c);if(m>0&&m<1){var d=e._evalBez(t,a,r,l,m);d<p&&(p=d),d>v&&(v=d)}}var x=o,g=o;if(s<x&&(x=s),s>g&&(g=s),(h=(f=6*o-12*n+6*i)*f-4*(c=3*s-9*i+9*n-3*o)*(u=3*n-3*o))>=0){var C=(-f+Math.sqrt(h))/(2*c);if(C>0&&C<1){var _=e._evalBez(o,n,i,s,C);_<x&&(x=_),_>g&&(g=_)}var M=(-f-Math.sqrt(h))/(2*c);if(M>0&&M<1){var T=e._evalBez(o,n,i,s,M);T<x&&(x=T),T>g&&(g=T)}}var b={};return b.left=p,b.top=x,b.right=v,b.bottom=g,b.width=b.right-b.left,b.height=b.bottom-b.top,b},this._shapeFunctions={RECTANGLE:function(t,o){if(o.beginPath(),o.rect(t.x,t.y,t.width,t.height),o.closePath(),t.fillColor){var a=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=a,o.fill()}o.stroke()},ROUNDEDRECTANGLE:function(t,o){var a=parseFloat(t.width),n=parseFloat(t.height),r=.1*a,i=parseFloat(t.x),l=parseFloat(t.y);if(o.beginPath(),o.moveTo(i+r,l),o.lineTo(i+a-r,l),o.quadraticCurveTo(i+a,l,i+a,l+r),o.lineTo(i+a,l+n-r),o.quadraticCurveTo(i+a,l+n,i+a-r,l+n),o.lineTo(i+r,l+n),o.quadraticCurveTo(i,l+n,i,l+n-r),o.lineTo(i,l+r),o.quadraticCurveTo(i,l,i+r,l),o.closePath(),t.fillColor){var s=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=s,o.fill()}o.stroke()},ELLIPSE:function(t,o){var a=parseFloat(t.width)/2,n=parseFloat(t.height)/2,r=parseFloat(t.x)+a,i=parseFloat(t.y)+n;if(o.beginPath(),o.ellipse(r,i,a,n,0,0,2*Math.PI),o.closePath(),t.fillColor){var l=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}o.stroke()},STAR5:function(t,o){e._starShapeFunction(t,5,o)},STAR6:function(t,o){e._starShapeFunction(t,6,o)},TRIANGLE:function(t,o){e._regularPolygonShapeFunction(t,3,o)},PENTAGON:function(t,o){e._regularPolygonShapeFunction(t,5,o)},HEXAGON:function(t,o){e._regularPolygonShapeFunction(t,6,o)},OCTAGON:function(t,o){e._regularPolygonShapeFunction(t,8,o)},PARALLELOGRAM:function(t,o){var a=parseFloat(t.x),n=parseFloat(t.y),r=a+parseFloat(t.width),i=n+parseFloat(t.height);if(o.beginPath(),o.moveTo(a,n),o.lineTo((2*r+a)/3,n),o.lineTo(r,i),o.lineTo((2*a+r)/3,i),o.closePath(),t.fillColor){var l=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}},CUSTOM:function(t,o){var a=t.customShape;if(a){for(var n=parseFloat(t.x),r=parseFloat(t.y),i=parseFloat(t.width),l=parseFloat(t.height),s=a.split(" "),c=Number.MAX_VALUE,f=Number.MAX_VALUE,u=Number.MIN_VALUE,h=Number.MIN_VALUE,p=void 0,v=void 0,y=0;y<s.length;y++)if("M"==s[y]){var F=parseFloat(s[y+1]),m=parseFloat(s[y+2]);c=Math.min(c,F),f=Math.min(f,m),u=Math.max(u,F),h=Math.max(h,m),p=F,v=m,y+=2}else if("L"==s[y]){var d=parseFloat(s[y+1]),x=parseFloat(s[y+2]);c=Math.min(c,d),f=Math.min(f,x),u=Math.max(u,d),h=Math.max(h,x),p=d,v=x,y+=2}else if("Q"==s[y]){var g=parseFloat(s[y+1]),C=parseFloat(s[y+2]),_=parseFloat(s[y+3]),M=parseFloat(s[y+4]),T=e._quadraticCurveBoundingBox(p,v,g,C,_,M);c=Math.min(c,T.left),c=Math.min(c,T.right),f=Math.min(f,T.bottom),f=Math.min(f,T.top),u=Math.max(u,T.left),u=Math.max(u,T.right),h=Math.max(h,T.bottom),h=Math.max(h,T.top),p=_,v=M,y+=4}else if("C"==s[y]){var b=parseFloat(s[y+1]),A=parseFloat(s[y+2]),P=parseFloat(s[y+3]),S=parseFloat(s[y+4]),w=parseFloat(s[y+5]),I=parseFloat(s[y+6]),O=e._bezierCurveBoundingBox(p,v,b,A,P,S,w,I);c=Math.min(c,O.left),c=Math.min(c,O.right),f=Math.min(f,O.bottom),f=Math.min(f,O.top),u=Math.max(u,O.left),u=Math.max(u,O.right),h=Math.max(h,O.bottom),h=Math.max(h,O.top),p=w,v=I,y+=6}var E=i/(u-c),N=l/(h-f),z=n-E*c,k=r-N*f;o.beginPath();for(var B=0;B<s.length;B++)if("NZ"==s[B])o.closePath(),o.beginPath(),o.mozFillRule="nonzero";else if("EO"==s[B])o.closePath(),o.beginPath(),o.mozFillRule="evenodd";else if("M"==s[B]){var L=z+E*parseFloat(s[B+1]),j=k+N*parseFloat(s[B+2]);o.moveTo(L,j),B+=2}else if("L"==s[B]){var X=z+E*parseFloat(s[B+1]),q=k+N*parseFloat(s[B+2]);o.lineTo(X,q),B+=2}else if("Q"==s[B]){var R=z+E*parseFloat(s[B+1]),G=k+N*parseFloat(s[B+2]),U=z+E*parseFloat(s[B+3]),Y=k+N*parseFloat(s[B+4]);o.quadraticCurveTo(R,G,U,Y),B+=4}else if("C"==s[B]){var V=z+E*parseFloat(s[B+1]),K=k+N*parseFloat(s[B+2]),D=z+E*parseFloat(s[B+3]),J=k+N*parseFloat(s[B+4]),Q=z+E*parseFloat(s[B+5]),H=k+N*parseFloat(s[B+6]);o.bezierCurveTo(V,K,D,J,Q,H),B+=6}else s[B];if(o.closePath(),t.fillColor){var W=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=W,o.fill()}o.stroke()}}},this._colorFromInt=function(t,o){return"rgb("+((16711680&(t>>>=0))>>>16)+","+((65280&t)>>>8)+","+(255&t)+","+parseFloat(o)/100+")"}}return a(t,[{key:"drawBackgroundFromNiceCX",value:function(t,o){var e=this.cx2js.cyBackgroundColorFromNiceCX(o);this.drawBackground(t,e)}},{key:"drawBackground",value:function(t,o){var e=t.cyCanvas({zIndex:-2}).getCanvas(),a=e.getContext("2d");t.on("render cyCanvas.resize",function(t){a.fillStyle=o,a.fillRect(0,0,e.width,e.height)})}},{key:"getAnnotationElementsFromNiceCX",value:function(t){return t.networkAttributes?t.networkAttributes.elements.filter(function(t){return"__Annotations"==t.n}):[]}},{key:"drawAnnotationsFromAnnotationElements",value:function(t,o){var e=this,a=this.cx2js,n=t.cyCanvas({zIndex:-1}),r=t.cyCanvas({zIndex:1}),i=n.getCanvas().getContext("2d"),l=r.getCanvas().getContext("2d");t.on("render cyCanvas.resize",function(t){var s=e._colorFromInt,c=e._shapeFunctions;n.resetTransform(i),n.clear(i),n.setTransform(i),i.save(),r.resetTransform(l),r.clear(l),r.setTransform(l),l.save();var f={},u=[],h=[];o.forEach(function(t){t.v.forEach(function(t){var o=t.split("|"),e={};o.forEach(function(t){var o=t.split("=");e[o[0]]=o[1]}),f[e.uuid]=e,"foreground"==e.canvas?u.push(e.uuid):h.push(e.uuid)})});var p=function(t,o){var e=f[t],a=f[o];return parseInt(a.z)-parseInt(e.z)};u.sort(p),h.sort(p),[{context:l,annotations:u},{context:i,annotations:h}].forEach(function(t){var o=t.context;t.annotations.forEach(function(t){var e,n,r,i=f[t];if("org.cytoscape.view.presentation.annotations.ShapeAnnotation"==i.type||"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type){var l=i.zoom?parseFloat(i.zoom):1;o.lineWidth=i.edgeThickness,i.width=parseFloat(i.width)/l,i.height=parseFloat(i.height)/l,c[i.shapeType]?(o.strokeStyle=s(i.edgeColor,i.edgeOpacity),c[i.shapeType](i,o)):console.warn("Invalid shape type: "+i.shapeType)}else if("org.cytoscape.view.presentation.annotations.ArrowAnnotation"==i.type&&i.targetAnnotation&&i.sourceAnnotation){f[i.sourceAnnotation],f[i.targetAnnotation];o.stroke()}if("org.cytoscape.view.presentation.annotations.TextAnnotation"==i.type?(e=i.text,o.textBaseline="top",o.textAlign="left",n=i.x,r=i.y):"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type&&(e=i.text,o.textBaseline="middle",o.textAlign="center",n=parseFloat(i.x)+i.width/2,r=parseFloat(i.y)+i.height/2),e&&n&&r){var u,h=i.zoom?parseFloat(i.zoom):1,p=parseFloat(i.fontSize)/h;if(i.fontFamily&&(u=a.JavaLogicalFontConstants.FONT_FAMILY_LIST.includes(i.fontFamily)?a.JavaLogicalFontConstants.FONT_STACK_MAP[i.fontFamily]:a.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]?a.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]:"sans-serif"),o.font=p+"px "+u,i.color){var v=s(i.color,"100");o.fillStyle=v}o.fillText(e.toString(),n,r)}})}),l.restore(),i.restore()})}},{key:"drawAnnotationsFromNiceCX",value:function(t,o){var e=this.getAnnotationElementsFromNiceCX(o);this.drawAnnotationsFromAnnotationElements(t,e)}}]),t}();t.exports={CxToCyCanvas:n}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,